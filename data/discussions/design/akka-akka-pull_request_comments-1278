<patriknw> update comment also
<patriknw> Can we solve all those `asInstanceOf[InternalActorRef]` in some more elegant way?
Some implicit conversion that is only for internal use?
<viktorklang> Since it seems to be used mainly for sending system message, I think it's good enough if we make an internal utility method
<drewhk> Maybe watcher should be of type InternalActoRef? Then no casting is needed.
<viktorklang>     self.tell(Terminated(actor)(existenceConfirmed, addressTerminated), actor)
<viktorklang> Good observation Endre!
<viktorklang> match on type instead of extractor?
<viktorklang> 3L? Really?
<viktorklang> not super.sendSystemMessage?
<viktorklang> child: ActorRefWithCell with ActorRefScope ?
<drewhk> Dummy question, but what should it be? I have never used Java  
serialization before :)
<patriknw> It can be just anything. Normally you start with `1L` for a new class, and then bump it when doing non-compatible changes
<viktorklang> Yep, so then you can see how "evolved" the class is :)
<drewhk> Thanks! Me dummy :)
<rkuhn> I’m not sure about the second condition: by default `preRestart` unwatches the children, which should get rid of `Terminated` messages during restart; what this check means is that any watch notification will be dropped silently during restart, which is probably not expected.
<rkuhn> this should be `addressTerminated = true`
<rkuhn> this should not be done if the previous one was already done, it’s a duplicate
<rkuhn> so I’d prefer a match over `foreach`
<rkuhn> this line should not be so empty
<drewhk> Thanks for noticing!!
