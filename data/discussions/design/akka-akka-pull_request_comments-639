<patriknw> `getOrElse(null)` can be written as `orNull`
<rkuhn> now there's an easy performance win here: just turn it around to make `def child(name)=Option(getChild(name))`
<patriknw> Shouldn't getChild be only in UntypedActorContext? It's purpose is for java api.
<rkuhn> ActorCell must implement both, and ActorContext does not expose the Java variant, AFAICS
<patriknw> ok, now I see it
<bantonsson> I don't get the performance optimization comment. How I would rewrite the `getChild` method so it returns null for both `None` and `Some(ChildNameReserved)` in a nice way without basically doing the same thing that I do right now in `child`?
<patriknw> I think his idea was to move current child code to getChild and return s.child or null
<bantonsson> I guess so, but what should I use then? If I flatMap I get back an `Option`.

I'm running out of ideas here, how do I do that filtering/transformation to the Option without ending up with an Option as the product?

<rkuhn> I'd just use a pattern match instead
<bantonsson> Aha, you are not true to Scala ;) "A less-idiomatic way to use Option values is via pattern matching"
