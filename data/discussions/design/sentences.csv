This is great.,general
I like it.,general
I liked it.,general
Cool.,general
Nice.,general
Great.,general
I expected it to be in akka-remote module.,design
akka module should allow it.,design
inconsistent module descriptor file found.,general
Are we packaging the cluster module?,general
If no extra dependencies are needed can this stay here or do you think extra module is right in any case?,design
But if the Address is the same as our listen address then isLocal should return true.,general
You may in your class extending ActorSystemActivator override the getActorSystemConfig.,design
The annotation is also a good indication that this class must be handled with care when doing changes.,design
If we make Actor an abstract base class we will break literally every user code base that exists.,design
Should this class be public?,design
can you change seenBy and getSeenBy to private[akka]. That should only be internal api.,design
The irony is that it _will_ blow up if the default case is removed.,general
you can still create a ticket if you fear that you would otherwise forget it.,general
if the receiving actor fails while processing the message or is already terminated.,general
We could store things in a WeakHashMap to not leak classes & class loaders.,design
That is handled by the caller.,design
This class has no access to settings.,design
the Send class here is intentionally mutable.,design
we want to work with a single instance until its buffer has been encrypted completely.,design
a special byte array serializer could be useful for other things.,general
Right. Since it is currently fixed size anyway an array would fit.,general
The loop is one chunk of work and has its own commit. it's one fix for all the issues previously discussed.,general
would it make sense to abort the loop if too many discarded?,general
What happens if we loop around with the default buffer?,general
how do we know that this loop has an end?,general
the endless loop is important to address.,general
Creating a set in a tight loop just to check for a condition?,general
do you prefer to do the removal inside the above loop.,general
you don’t need to get the loop on the same stack.,general
in a loop with the timeout value set according to the deadline and current time.,general
go through deprecation and removal of a feature introduced in the previous release.,general
Thx for this feature - we'll try to use it.,general
I'll leave that to the excellent authors of this amazing feature.,general
In our eyes we are feature complete with an "ok" initial test coverage.,general
the feature is based on maven repo and loads.,general
So Maven structure leads us to deploy the feature and other bundles on the local maven repository.,general
high time that we nuke that feature and its test.,general
Given how small this feature is code-wise I’m certain that we’re doing things right. Great work.,general
I also fixed a problem with Johannes' latest "half-closed" feature that only surfaced under OS/X and cleaned up some small stuff.,general
Based on the recent comments. it looks like there will be another (bigger) round of changes + review.,general
I think it's feature complete.,general
The select feature is in fact provided in the form of Stash.,general
I'm still making up a case for the isEmpty feature and maybe if you could consider the microbenchmark below.,general
this is where the feature will be completely disabled when configured.,general
Yes it should. otherwise it will be surprising that the feature doesn't work. We want least surprise.,general
Why is MixMetricsSelector both a case class and a case object and the case object neither extends the class nor returns a cached default value.,design
created a separate class for SystemGuardian.,design
Should we put this in the base class so we don't need to override it and type the same thing every test?,design
I'll refactor this class to have a protected strategy method that people can override to achieve the same goal.,design
this should be public.,design
Exposing the class was the whole point of the refactoring.,design
Perhaps the solution is to not be able to request a size at all the size you'll get is the size in the config.,general
The only use of the buffer is to gain performance and a smaller buffer should not affect the semantics of your program.,general
And what are the performance implications?,general
I think we should allocate an array instead. then the adds and removes do not incur any allocations.,general
Might just be better of with an array and linear find.,general
Even better: sorted array and binary search.,general
that's a costly thing to do. the byte array will become a Vector.,general
If performance is important here I think I'd recommend not using options and use a cached empty byte array as an EOF marker.,general
for performance you might want to hoist "name+"."" out of the guard.,general
If performance is important here I think I'd recommend not using options.,general
This will do a lookup in the system-internal map for every invocation is this intentional?,general
is the mutable map needed for performance?,general
something that takes a key-value map for things to be replaces with something,general
I'll have another look at this. You don't want to go to the map every time you send a message.,general
Not even sure if Scala vector and map are that usable from Java.,general
second parameter list not used in equals,general
The docs does not say anything about the mutability of the list returned by this method.,general
Here the double param list becomes both very ugly and unintutive.,general
When I read "Acknowledgements" I expected a list of names.,general
Avoid this branching here by concating the empty list.,general
we have a convention to use square brackets around variables,general
A “closure” is a lambda expression with free variables which are bound to the enclosing lexical context,general
Don't forget to remove the unused shift variable at line 513 (or wherever it ended up now),general
Should we put this in the base class so we don't need to override it and type the same thing every test?,design
We can still override if needed.,design
What if a null is passed in here last?,general
Shouldn't we have a Queue that records all updates or similar?,design
members will never be null,general
I have fixed this for the cluster tests initialParticipants are by default same as number of registered roles,general
yup looking good,general
LGETM (“good enough”) will properly review later,general
Fixed review comments.,general 
Merging.,general
StatsService ruining the day can we fix it?,general
PLS REBUILD ALL,general
LGTM!,general
LGTM!!!,general
LGTM.,general
Nice,general
good,general
LGTM,general
+1,general
This is not supposed to be used externally.,design
it should use an ExecutorServiceConfigurator so it can be managed externally.,design
this class is an internal structure.,design
True will make public again. On the other hand we have other places which require external implementors.,design
No this is cheating by using low-level API that shouldn't even be exposed.,design
Since the SelectionHandler ref is not exposed.,design
Method is exposed to subclasses to be able to implement custom.,design
an implementation detail that shouldn't be exposed to users.,design
would it be possible to make actor accessible in the public API?,design
we can add new methods to Context without accidentally breaking peoples Actors evolve the api without breaking user code.,design
Why does it return a leaking implementation detail?,design
Should probably use composition instead of inheritance.,design
Should this class be public?,design
UnsupportedActorRef already implements ScalaActorRef.,design
Is this a public method?,design
Why does this extend ScalaActorRef?,design
I think that RoutedActorRef is going to be a part of the API.,design
to do a redesign on this part.,design
current approach is not very extensible friendly.,design
Should this class be public?,design
it should be part of the Api.,design
This is how it is implemented in the ClusteredActorRef the design of the RoutedActorRef was based on.,design
Can't that be solved with overloading?,design
the current design isn't very exensible,design
I would have modelled it.,design
we should expose implementation details or not perhaps we should discuss it.,design
should be updated to not use.,design
Any internal usages that should be updated?,design
refactoring should be kept separate as one is changing user API and one is internal implementaiton details.,design
change the internals.,design
I agree that this shouldn't be exposed.,design
is SchedulerException ever exposed to users? ,design
Make it private?,design
The events need to be private and should not be exposed.,design
They are for internal use only.,design
Users can use awaitActivation methods from Activation.,design
I'll make it private,design
that other internal events are published in akka as public classes.,design
it is dangerous as they are internals and we are not prepared to expose them.,design
they are exposing the internals of implementation and break encapsulation.,design
I've made them internal again.,design
minimize exposure.,design
This whole structure is specific to this actor and should not be used anywhere else.,design
It is not the job of this structure to enforce that.,design
internal should not be publicly visible.,design
This should not be here this is specific to the TestTransport.,design
Some implicit conversion that is only for internal use?,design
make an internal utility method,design
this is the way to create RoutedActorRefs.,design
low-level API that shouldn't even be exposed.,design
Should not be used.,design
api type. Perhaps this is just internal.,design
this should go inside RemoteWatcher.props.,design
places that use props factory method pattern.,design
it must be better to define all props in the props factory.,design
it should be getContext().actorOf.,design
these should be internal API.,design
It should then be marked as internal API.,design
actor extending UntypedProcessor.,design
Message creation inside and outside a processor.,design
The reason for private[persistence] is that it is used by the RecoverOnRestart trait.,design
will become either INTERNAL API or private.,design
What about moving the above preStart implementation to Processor?,design
processors can only override preRestartProcessor,design
we could move the preRestart and postRestart implementations to Processor.,design
concrete processors should override preRestartProcessor and postRestartProcessor.,design
using an actor context in the wrong place.,design
It will be called only if users create new outbound messages via Message.,design
My assumptions about LevelDB API might be incorrect.,design
move from ActorRef to pattern.,design
OldActor so that existing code works inside actors.,design
Add needed implicit conversion in this package.scala file so that existing code works outside actors.,design
Document as internal and make final.,design
I like to move it move it.,design
should be private.,design
I'd definitely recommend making DeadLetterActorRef a subtype of EmptyLocalActorRef.,design
why is this class public?,design
I'm guessing this should be private and documented as internal.,design
would it be possible to move to context?,design
should not be user extendable yet.,design
prevent subclassing by user code.,design
its only use-case within the library is.,design
why not private?,design
I think it can be private.,design
Because otherwise we wouldn’t know how to create a Future.,design
we could also change that to require an implicit ExecutionContext.,design
ActorRefProvider does not expose a reference to its ActorSystem.,design
Subclassing applies to ActorSystem or ActorCell.,design
A factory to create MessageQueues for an optionally provided ActorContext.,design
why is it exposed?,design
The rest of the ActorPath handling is also not private.,design
So you don’t want people to implement MessageDispatcher?,design
I think we should only export not the other ones.,design
it probably makes more sense to mark as private packages.,design
I would personally keep that export.,design
to move the things from org.jboss.netty.akka.util to akka.util.,design
config will become an explicit dependency as well.,design
only used internally or should they be exposed in the API?,design
If just internal you could consider to put them into akka.internal.util.,design
We'll make them package protected.,design
suggest to just wrap in a RemoteTransportException and rethrow and let the layer above decide if it should be logged or not.,design
Just wrap in a RemoteTransportException and let the caller decide if it should be logged or not.,design
This should be private and be documented as internal api.,design
Why not throw an exception here instead of having to check for None in the code which uses it?,design
Shouldn't getChild be only in UntypedActorContext? It's purpose is for java api.,design
ActorCell must implement both and ActorContext does not expose the Java variant,design
This should be pulled out of the trait since it is a constant put in some object.,design
now you're exposing "this" to another Actor.,design
private this.,design
These should be in a companion object like usual.,design
If the extension you have a reference to ExtendedActorSystem.,design
If you want to log directly to j.u.l. then you should use that api directly.,design
It allows the Akka Logging API to be used outside of Actor systems.,design
is that it doesn't require any dependencies.,design
Instead of directly calling into the ConcurrentSocketActor through methods like connect bind etc you should send messages to the actor.,design
But you're calling out to the methods of the Actor which is a violation of the ActorModel.,design
methods inside the select-function? (or are they used internally in the actor as well?,design
No they are only invoked from #select and should not be invoked from any other site either inside or outside the actor.,design
so move them into the select function.,design
it's better to create the actor inside the newSocket method and pass the supervisor into it.,design
you might as well move the method definition into receiveFrames.,design
it should be: private.,design
will this be exposed in some way in Spray?,design
