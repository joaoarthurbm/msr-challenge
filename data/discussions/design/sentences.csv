Youre hiding the SecureString dependency on allocatorsh by indirect include via serializeh;rkuhn;bitcoin-bitcoin-commit_comments-dac0beb01b9ffe01ef85b3334c7077909321370a;design
makes sense here after the dependency is moved to class;rkuhn;bitcoin-bitcoin-commit_comments-dac0beb01b9ffe01ef85b3334c7077909321370a;design
Without a doubt ideally there are no indirect dependencies anywhere but that would take a lot of knowledge about all files dependency fulfillment and usage;rkuhn;bitcoin-bitcoin-commit_comments-dac0beb01b9ffe01ef85b3334c7077909321370a;design
Id rather avoid adding more dependencies in CAddrDB for something that isnt really used elsewhere;rkuhn;bitcoin-bitcoin-commit_comments-dac0beb01b9ffe01ef85b3334c7077909321370a;design
This duplication is quite ugly Mikes refactor that moves these chaindependent constants to a separate class is nicer but you may want to check that it doesnt introduce new dependencies;rkuhn;bitcoin-bitcoin-commit_comments-dac0beb01b9ffe01ef85b3334c7077909321370a;design
Well the remote routers need to handle the nodes setting which the local ones do not Hence there must be a translation between local and remote unless the RemoteDeployer would not use local parsing at all, which is obviously even worse If that translation is part of the router interface so that the RemoteDeployer could do it generically then local routers need to know about their remote counterparts which is not possible due to cyclic dependencies between the packages;rkuhn;akka-akka-commit_comments-dac0beb01b9ffe01ef85b3334c7077909321370a;design
We cant have external dependencies in akkaactor Therefore I have embedded the code You can continue work in your repository and we will copy it The long term goal is to push it down to scala library;patriknw;akka-akka-issue_comments-116;design
I changed the MultiNodeSpec to not depend on AkkaSpec or on a specific test framework and removed all dependencies to ScalaTest from the published artifacts;bantonsson;akka-akka-issue_comments-692;design
The orgjboss dependencies shouldnt be present in the general interface;viktorklang;akka-akka-pull_request_comments-106;design
Yes i struggled a bit with the dependencies here Do u think it would be better to send the publisher ref to the parent from core and start the metricstriggered on that;patriknw;akka-akka-pull_request_comments-1122;design
Ill take a look at the ActorComponent and the Message dependencies when I have time;RayRoestenburg;akka-akka-pull_request_comments-245;design
True good catch Did think about it when I first saw the code to mention but thought FSM would mean more dependencies but now I see it is in akka actor;RayRoestenburg;akka-akka-pull_request_comments-344;design
This shouldnt be added into akka remote it should be a sub module to akka remote so people dont need the extra dependencies if they dont use rcl;viktorklang;akka-akka-pull_request_comments-486;design
This implementation seems like there should already exist such a utility function amongst the dependencies try to find one and use that;viktorklang;akka-akka-pull_request_comments-669;design
Im not a huge fan of adding dependencies even for tests can we avoid these;viktorklang;akka-akka-pull_request_comments-669;design
Yes A FIXME should probably be added to the dependencies in AkkaBuild as well;bantonsson;akka-akka-pull_request_comments-852;design
I think JavaLoggingEventHandler is a good thing An advantage over slf4j with jul is that it doesnt require any dependencies but I guess it solved some problem also;patriknw;akka-akka-pull_request_comments-913;design
Jut as a FYI comeaio will be dropped Ive added a ticket to move the things from orgjbossnettyakkautil to akkautil comtypesafeconfig will become an explicit dependency as well instead of an embedded one This will hopefully clean up the exportPackage;viktorklang;akka-akka-pull_request_comments-460;design
Also there is an issue with Message dependency on CamelContext can you suggest any elegant way of getting rid of this dependency;piotrga;akka-akka-pull_request_comments-245;design
what is the advantage of this Base64 which adds another dependency over javanetURLEncoderULRDecoder;patriknw;akka-akka-pull_request_comments-1747;design
You should also mention that you need to add akka remote as a dependency;viktorklang;akka-akka-pull_request_comments-168;design
This is actually the simplest I could do to preserve the existing semantics An even better approach and one I want to do once someone can answer my questions on repercussions is to not dynamically depend on projects but to depend on the dependencyClasspath setting Using this we should be able to get all the dependent jars classpath directories and we can filter this to grab the relevant reference conf files Then were no longer used advanced sbt features and we might see more stability;jsuereth;akka-akka-pull_request_comments-1617;design
why is the kernel dependency needed;patriknw;akka-akka-pull_request_comments-1285;design
I dont agree I think extensions should be registered on demand when first used Otherwise we have the dependency issue that ActorSystem need to know about all extensions or users need to configure all extensions they use;patriknw;akka-akka-pull_request_comments-121;design
Using ref single updatenewValue could be more efficient I know eliminating a read dependency can help in a DB transaction but not sure about in our STM implementation;richdoughertyakka-akka-pull_request_comments-1051;design
I need help with sbt as there are dependency conflicts;muuki88;muuki88;akka-akka-issue_comments-589;design
The dependency on specs2 has been removed in order to lessen the pain of living close to scala master, it would be great if you could check the plain text documentation and make that as good as possible instead thanks;rkuhn;akka-akka-issue_comments-502;design
For the code changes: the current akka osgi module has the import for the org apache aries marked as optional so theres no runtime dependency preventing this from working in a plain OSGi environment but I can obviously separate that into a new module as well if you prefer And I can obviously make the changes to the public methods as well;gertv;akka-akka-issue_comments-500;design
So akka testkit doesnt have a dependency on either ScalaTest or JUnit so the AkkaJUnitActorSystemResource is not part of the normal akka testkit;bantonsson;akka-akka-issue_comments-1395;design
Still getting rid of the hashmap in the selector can and IMHO should still be done This has no dependency on this PR however I will open a separate P for that change;sirthias;akka-akka-issue_comments-1355;design
Looks great Patrik Since this is general purpose does it belong in util Or does that introduce an unwanted dependency on dispatch;scullxbones;akka-akka-commit_comments-a35cc848df0c22f85d8d9604ab73528f05459c42;design
named parameter would make it more readable isClient false;patriknw;akka-akka-pull_request_comments-994;general
No this reads fine Using List or Vector as arguments is more readable It's only in the case where there is an explicit conversion that I think it needs to be overstated;bantonsson;akka-akka-pull_request_comments-838;general
I prefer to[immutable.Seq] even though you get the same thing The intention is more readable This is the only place with to[Vector] that I could find;bantonsson;akka-akka-pull_request_comments-838;general
I think that piece of code is deceptive Can we make it more readable;viktorklang;akka-akka-pull_request_comments-703;general
I don't understand why this would be less readable but it's up to you;patriknw;akka-akka-pull_request_comments-538;general
in what way is this more readable than the original;patriknw;akka-akka-pull_request_comments-456;general
while I like short variable names here they are part of the API by being parameter names I recommend using slightly more readable ones cid particularly but I always confused by snr too I always think of signal-to-noise-ratio;drewhk;akka-akka-pull_request_comments-1700;general
can this be written in a more readable way;patriknw;akka-akka-pull_request_comments-1649;general
I prefer the code to be correct and readable first when we see that that is a performance problem weâ€™ll fix it but not before;rkuhn;akka-akka-pull_request_comments-1593;general
can you use these constants in receiveGossip would make things more readable;patriknw;akka-akka-pull_request_comments-1535;general
please reformat these to be more readable;rkuhn;akka-akka-pull_request_comments-1452;general
This split makes it all much more readable Very nice;bantonsson;akka-akka-pull_request_comments-1432;general
well let me explain where I come from this is for logging and the output should be useful for the one seeing it raw millis are not useful offsets are also not really useful because all those calculations in the head are not easy Hence my conclusion that if we include something then it should be human-readable;rkuhn;akka-akka-pull_request_comments-1356;general
I had a match before but it really doesn't add any value since I don't need the cast anywhere So I found the single isInstanceOf actually a bit more readable;sirthias;akka-akka-pull_request_comments-1328;general
You're right That is unreadable without syntax highlighting;bantonsson;akka-akka-pull_request_comments-1323;general
Probably not I can expand it into two cases if that's more readable;bantonsson;akka-akka-pull_request_comments-1113;general
I actually find the case m MemberDowned MemberRemoved more readable;bantonsson;akka-akka-pull_request_comments-1112;general
I patched the CSS to make this readable in HTML but non breaking spaces are probably better Although they could mess with wrapping;richdougherty;akka-akka-pull_request_comments-1095;general
My experience is that looks unreadable for multi-word things but I have not tried it together with;patriknw;akka-akka-pull_request_comments-1095;general
The benefits are more readable failure messages and two lines less could be used through-out;rkuhn;akka-akka-pull_request_comments-1030;general
this section is basically unreadable it would greatly benefit from some white space;rkuhn;akka-akka-pull_request_comments-1029;general
Looks great A lot nicer more readable and intuitive;jboner;akka-akka-issue_comments-674;general
Very nice test I love how these multi-node tests becomes much simpler and more readable than the in-memory counterparts Also that a language and set of patterns for how to write these is emerging;jboner;akka-akka-issue_comments-483;general
This is a actually a chapter that would be more readable if split into Java Scala since it's more sample than text;patriknw;akka-akka-issue_comments-150;general
But I also try to limit the scope of the ticket I already did some cleaning to make it easier readable;pveentjer;akka-akka-commit_comments-aaec3aef77d7780a006bcac0ce0d6de2db77e7b7;general
You can make this more readable by using the implicit conversion available in;patriknw;akka-akka-commit_comments-7ca5a4161bb279d94dc1de1750cdfb966ca39151;general
Yes I'll add that to the comments so things might be more readable;bantonsson;akka-akka-commit_comments-61e47c115da8cfbcb1c2abfda37752cb436fd7eb;general
please somehow demarcate the end of the constructor arguments given scalariform indentation rules this probably means adding an empty line;rkuhn;akka-akka-pull_request_comments-831;general
In doc code we have switched to 2 space indentation for java code also and line breaks after some 70 chars unsure about the exact number;patriknw;akka-akka-pull_request_comments-785;general
please fix indentation;rkuhn;akka-akka-pull_request_comments-785;general
I'd add some indentation of the whole config and fix formatting of next line;patriknw;akka-akka-pull_request_comments-700;general
Nah it looks like you've changed indentation;viktorklang;akka-akka-pull_request_comments-522;general
This is a bit half baked isnâ€™t it Either do it fully with nice indentation or leave it on one line;rkuhn;akka-akka-pull_request_comments-426;general
someone broke you indentation;rkuhn;akka-akka-pull_request_comments-209;general
Are you gonna blame Eclipse for this hideous indentation;bantonsson;akka-akka-pull_request_comments-1731;general
Wrong as in 3chars or wrong as in the code block has wrong indentation;viktorklang;akka-akka-pull_request_comments-141;general
wrong indentation;patriknw;akka-akka-pull_request_comments-141;general
yes and I think scalariform indentation will be wrong if placing it above the case;patriknw;akka-akka-pull_request_comments-1136;general
indentation;rkuhn;akka-akka-pull_request_comments-1040;general
indentation braces fixed Ready;viktorklang;akka-akka-issue_comments-1485;general
Why 4 spaces indentation mixed with 2 Matters since it is part of docs IMHO;jboner;akka-akka-commit_comments-5e03cda4bb77a95aa84aa00225e719b6c1edfe63;general
Use 2 spaces indentation below;jboner;akka-akka-commit_comments-41ce42c8f721f4102c4e035144ac0f6562cb15c6;general
So it appears that this singleton scheduler serves some purpose;pveentjer;akka-akka-commit_comments-c8c12ab56b8303918e54c80713561a5b4f44a6cb;design
I still think it would make sense to take and stash handOverData during the entire lifetime of the singleton;rkuhn;akka-akka-pull_request_comments-1040;design
that would not be a very well behaving singleton should be documented;patriknw;akka-akka-pull_request_comments-1040;design
Should it be ClusterSingletonManager and the child is the actual singleton;patriknw;akka-akka-pull_request_comments-1040;design
that would not be a very well behaving singleton should be documented;patriknw;akka-akka-pull_request_comments-1040;design
a factory, which can be instantiated without constructor arguments;rkuhn;akka-akka-issue_comments-123;design
same thing at other places that use props factory method pattern;patriknw;akka-akka-pull_request_comments-1500;design
At some point I added factory methods for message to CamelExtension so messages could only be created from camel instance which should be available from every actor;piotrga;akka-akka-pull_request_comments-217;design
Shouldn't this use the systems threadfactorys ClassLoader;viktorklang;akka-akka-pull_request_comments-275;design
This will be used automatically if you use the factory method do not pass in a loader and the context loader is non null;rkuhn;akka-akka-pull_request_comments-380;design
A factory to create MessageQueues for an optionally provided;patriknw;akka-akka-pull_request_comments-456;design
From user api its Companion object providing factory methods;patriknw;akka-akka-pull_request_comments-493;design
I think this should be accompanied by a factory which accepts and has the appropriate WARNING signs uses;rkuhn;akka-akka-pull_request_comments-583;design
Why different order of args in this factory method compared to the constructor;jboner;akka-akka-pull_request_comments-698;design
I would recommend offering a static factory method which takes an and makes such a top-level supervisor and then an method which takes a supervisor message;rkuhn;akka-akka-pull_request_comments-785;design
instead of an the factory method should take an so that you can also create the supervisor below another;rkuhn;akka-akka-pull_request_comments-785;design
You may in your class extending ActorSystemActivator override the getActorSystemConfig;Crossing-Tech;akka-akka-pull_request_comments-1060;design
if we make Actor an abstract base class we will break literally every user code base that exists;jboner;akka-akka-issue_comments-456;design
Should this class be public;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Should this class be public;pveentjer;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
can you change seenBy and getSeenBy to private That should only be internal api;patriknw;akka-akka-pull_request_comments-909;design
We could store things in a WeakHashMap to not leak classes and class loaders;bantonsson;akka-akka-pull_request_comments-1343;design
That is handled by the caller This class has no access to settings;drewhk;akka-akka-pull_request_comments-1352;design
The Send class here is intentionally mutable (through the ByteBuffer) because we want to work with a single instance until its buffer has been encrypted completely;sirthias;akka-akka-pull_request_comments-1351;design
Why is MixMetricsSelector both a case class and a case object and the case object neither extends the class nor returns a cached default value Is MixMetricsSelector case-class mutable I vote for removing the case object MixMetricsSelector;viktorklang;akka-akka-pull_request_comments-858;design
created a separate class for SystemGuardian;patriknw;akka-akka-pull_request_comments-744;design
Should we put this in the base class so we do not need to override it and type the same thing every test We can still override if needed;jboner;akka-akka-pull_request_comments-523;design
The two other constructors have been added to allow Java users to use the ActorSystemActivator but if you want this third option to be available for Java users as well I'll refactor this class to have a protected strategy method that people can override to achieve the same goal;gertv;akka-akka-pull_request_comments-500;design
should this be public;patriknw;akka-akka-pull_request_comments-1368;design
yes this should be public exposing the class was the whole point of the refactoring;rkuhn;akka-akka-pull_request_comments-1368;design
Should we put this in the base class so we don't need to override it and type the same thing every test we can still override it;jboner;akka-akka-pull_request_comments-523;design 
This is not supposed to be used externally but it is not clearly marked as such;rkuhn;akka-akka-issue_comments-389;design
That method signature change is package protected so it's not reachable;viktorklang;akka-akka-issue_comments-389;design
As we talked about it should use an ExecutorServiceConfigurator so it can be managed externally;viktorklang;akka-akka-pull_request_comments-1027;design
this class is an internal structure EndpointRegistry This is only used by EndpointManager who does the check and who gets the Quarantine command from the external worlds;drewhk;akka-akka-pull_request_comments-1352;design
True will make public again On the other hand we have other places which require external implementors to put their code in the akka package;rkuhn;akka-akka-pull_request_comments-316;design
No this is cheating by using low-level API that shouldn't even be exposed;jboner;akka-akka-pull_request_comments-132;design
Since the SelectionHandler ref is not exposed to the user the only ones who can potentially call assign a watch are ourselves control for what actors we are seeing Terminated events which are only children;sirthias;akka-akka-pull_request_comments-1406;design
Method is exposed to subclasses to be able to implement custom routers based on mailbox and actor internal state;viktorklang;akka-akka-pull_request_comments-209;design
is not existenceConfirmed also an implementation detail that should not be exposed to users;patriknw;akka-akka-pull_request_comments-749;design
Would it be possible to make actor accessible in the public API;oschulz;akka-akka-commit_comments-2e459f5f1d6b88472118b8c479f3eded3740926a;design
I agree to this as the most important reason It gives us freedom to evolve the api without breaking user code;patriknw;akka-akka-commit_comments-3204269f6a0fb2aec94595f504e2c423d9344b5c;design
we can add new methods to Context without accidentally breaking peoples Actors;viktorklang;akka-akka-commit_comments-3204269f6a0fb2aec94595f504e2c423d9344b5c;design
Why do we want to make the user type more by removing all the methods from Actor;jboner;akka-akka-commit_comments-3204269f6a0fb2aec94595f504e2c423d9344b5c;design
Why does it return a RoutedActorRef leaking implementation detail;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Should this class be public;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Should probably use composition instead of inheritance;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
UnsupportedActorRef already implements ScalaActorRef;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Is this a public method intended for end-user usage;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
RoutedActorRef is going to be a part of the API just like the LocalActorRef where you can do Router specific stuff on like adding removing;pveentjer;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Why does this class extend ScalaActorRef;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
But to do a redesign on this part I do not consider a part of this already to big task we both agree upon that the current approach is not very extensible;pveentjer;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Should this class be public;pveentjer;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
If it should be part of the Api like the LocalActorRef or the RemoteActorRef it should But I do not like making abstract classes part of the API instead of interfaces;pveentjer;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
This is how it is implemented in the ClusteredActorRef the design of the RoutedActorRef was based on;pveentjer;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Can not that be solved with overloading;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
Not through these methods I suggested that the current design is not very extensible for this reason but that is how it was modelled with the ClusterActorRef based on It certainly isn not the way how I would have modelled it;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
I'm still unsure if we should expose implementation details or not we should discuss it;viktorklang;akka-akka-commit_comments-4b4f38c9738b06e04b956bef669855a899118d3e;design
think the doc tests should be updated to not use isTerminated;patriknw;akka-akka-issue_comments-1290;design
I still think the doc tests should be updated to not use isTerminated since that is user API;patriknw;akka-akka-issue_comments-1290;design
One reason to not use Akka actors could be that the Akka actors may be dependent on the Index class If the test class is dependent on Akka actors;kjellwinblad;akka-akka-pull_request_comments-94;design
Any internal usages that should be updated;patriknw;akka-akka-issue_comments-1290;design
I think the deprecation and the refactoring should be kept separate as one is changing user API and one is internal implementaiton details;viktorklang;akka-akka-issue_comments-1290;design
Create another ticket if you do not want to change the internals;patriknw;akka-akka-issue_comments-1290;design
I agree that this shouldn't be exposed at all it still best way to avoid reinventing the wheel is to use the BatchingExecutor;viktorklang;akka-akka-pull_request_comments-1097;design
is SchedulerException ever exposed to users Make it private;patriknw;akka-akka-pull_request_comments-1027;design
The events need to be private and should not be exposed They are for internal use only Users can use awaitActivation methods from Activation;piotrga;akka-akka-issue_comments-377;design
I will make it private to not confuse users It is just that other internal events are published in akka as public classes;RayRoestenburg;akka-akka-issue_comments-377;design
ok if I make it private;patriknw;akka-akka-pull_request_comments-749;design
it does not have to but it is only used here close connection to the binarySearch I can make it private if you prefer that;patriknw;akka-akka-pull_request_comments-858;design
No I mean it is in the camel.internal package and is private, since it is for the ActivationTracker, put in the ActivationTracer companion and make it private;viktorklang;akka-akka-pull_request_comments-893;design
Might be dangerous in the wrong hands Feel free to remove it;jboner;akka-akka-commit_comments-b42417a2783d08ada468df81e34e89f5794b0413;design
We discussed it some time ago And we reached the agreement that it is dangerous as they are internals and we are not prepared to expose them as they are exposing the internals of implementation and break encapsulation;piotrga;akka-akka-issue_comments-377;design
Seems a bit dangerous to me it can go in for now but in the future it might make sense to think about a cleaner way of FSM composition;drewhk;akka-akka-issue_comments-849;design
This is the most dangerous initialization pattern presence of circular dependencies;drewhk;akka-akka-pull_request_comments-1163;design
The events need to be private and should not be exposed They are for internal use only Users can use awaitActivation methods from Activation;piotrga;akka-akka-issue_comments-377;design
I have made them internal again;RayRoestenburg;akka-akka-issue_comments-377;design
minimize exposure;RayRoestenburg;akka-akka-issue_comments-377;design
This whole structure is specific to this actor and should not be used anywhere else;drewhk;akka-akka-pull_request_comments-1028;design
It is not the job of this structure to enforce that it makes sense to throw an exception in that case;drewhk;akka-akka-pull_request_comments-1028;design
this message as well as all others underneath INTERNAL should not be publicly visible;sirthias;akka-akka-pull_request_comments-1030;design
This should not be here this is specific to the TestTransport;drewhk;akka-akka-pull_request_comments-1232;design
Can we solve all those in some more elegant way some implicit conversion that is only for internal use;patriknw;akka-akka-pull_request_comments-1278;design
Since it seems to be used mainly for sending system message I think it's good enough if we make an internal utility method;viktorklang;akka-akka-pull_request_comments-1278;design
I would be surprised if this is the way to create class RoutedActorRefs;viktorklang;akka-akka-pull_request_comments-132;design
No this is cheating by using low-level API that shouldn't even be exposed;jboner;akka-akka-pull_request_comments-132;design
immutable IndexedSeq as api type Perhaps this is just internal;patriknw;akka-akka-pull_request_comments-1351;design
this should go inside RemoteWatcher that use props factory method pattern;patriknw;akka-akka-pull_request_comments-1500;design
well for these internal actors that are not intended to be remote deployed it must be better to define all props in the props factory;patriknw;akka-akka-pull_request_comments-1500;design
I think a proper fix is to be able to pass in a ClassLoader to createActorSystem it should not default to class this overrides Thread.getContextClassloader;viktorklang;akka-akka-issue_comments-875;design
should we make it to make it consumable for java otherwise these should be INTERNAL API;patriknw;akka-akka-pull_request_comments-1700;design
It should then be marked as INTERNAL API it is public from java;patriknw;akka-akka-pull_request_comments-1700;design
The reason for private is that it is used by the RecoverOnRestart class will become either INTERNAL API or private;krasserm;akka-akka-pull_request_comments-1700;design
What about moving the above preStart implementation to Processor and make it final so that concrete processors can only override preRestartProcessor;krasserm;akka-akka-pull_request_comments-1700;design
How about moving these into akka util;rkuhn;akka-akka-pull_request_comments-426;design
concrete processors should override preRestartProcessor and postRestartProcessor if needed;krasserm;akka-akka-pull_request_comments-1700;design
Is there a reason for exposing CompactByteString and ContByteString as return types of the public api should not be a concern to the user just like users should not need to deal with Map1 A user should never be using the CompactByteString object as the ByteString object should be creating compact ByteStrings but the abstract ByteString class should just be returning ByteString;derekjw;akka-akka-issue_comments-462;design
I wanted to ByteStringCompact next to ByteString1 and ByteStrings to keep the three implementations together and so that ByteStringCompact has access to things which are private though currently the critical stuff is all private;oschulz;akka-akka-pull_request_comments-402;design
Should this create the Props only Passing ActorRefFactory if actor context and potentially using it in the wrong place outside the actor;patriknw;akka-akka-pull_request_comments-1700;design
I understand the issue of using an actor context in the wrong place but can you prevent that at all an actor could reply the context to a sender the context is then used in the onSuccess callback;krasserm;akka-akka-pull_request_comments-1700;design
currentMessage won't be called if users follow the msg approach discussed It will be called only if users create new outbound messages via This could be another good reason to recommend the msg approach inside processors;krasserm;akka-akka-pull_request_comments-1700;design
There should also be a section about the actual ask change move from ActorRef to pattern;patriknw;akka-akka-pull_request_comments-241;design
think some more things are needed in the migration kit Add the needed implicit conversions in OldActor so that existing code works inside actors;patriknw;akka-akka-pull_request_comments-241;design
Add needed implicit conversion in this package scala file so that existing code works outside actors;patriknw;akka-akka-pull_request_comments-241;design
Document as internal and make final;viktorklang;akka-akka-pull_request_comments-241;design
We can not really get away from exposing Node if we move it into a field instead but the problem is that there is no getAndSet on Unsafe so it can not use LOCK So I will move in isEmpty into AbstractNodeQueue and add count;viktorklang;akka-akka-pull_request_comments-1283;design
I would definitely recommend making DeadLetterActorRef a subtype extend of EmptyLocalActorRef and remove DeadLetterActorRefLike;viktorklang;akka-akka-pull_request_comments-241;design
why is this class public and not documented guessing this should be private and documented as internal users will be able to use private;viktorklang;akka-akka-pull_request_comments-241;design
any risk with that we can not change this one would it be possible to move to context;patriknw;akka-akka-pull_request_comments-456;design
protected or prevent subclassing by user code;patriknw;akka-akka-pull_request_comments-456;design
I think this class can be private;patriknw;akka-akka-pull_request_comments-456;design
ActorRefProvider does not expose a reference to its ActorSystem which is a good idea because of initialization order;rkuhn;akka-akka-pull_request_comments-456;design
A factory to create MessageQueues for an optionally provided ActorContext;patriknw;akka-akka-pull_request_comments-456;design
protected is weaker than protected so what are you saying Subclassing applies to ActorSystem or ActorCell;rkuhn;akka-akka-pull_request_comments-456;design
I do not see any value in hiding it The rest of the ActorPath handling is also not private;rkuhn;akka-akka-pull_request_comments-456;design
So you do not want people to implement MessageDispatcher;rkuhn;akka-akka-pull_request_comments-456;design
it probably makes more sense to mark as private packages these classes provide the most convenient way for passing along the correct;gertv;akka-akka-pull_request_comments-460;design
eaio will be removed I have added a ticket to move the things from org.jboss.netty.akka.util package to akka.util package;viktorklang;akka-akka-pull_request_comments-460;design
config package will become an explicit dependency as well instead of an embedded one clean up;viktorklang;akka-akka-pull_request_comments-460;design
We will make them package protected;viktorklang;akka-akka-pull_request_comments-460;design
Are the things from netty package only used internally or should they be exposed in the API If just internal you could consider to put them into akka util package;hseeberger;akka-akka-pull_request_comments-460;design
I suggest to just wrap in a RemoteTransportException and rethrow and let the layer above decide if it should be logged or not;viktorklang;akka-akka-pull_request_comments-476;design
Just wrap in a RemoteTransportException and let the caller decide if it should be logged or not;viktorklang;akka-akka-pull_request_comments-476;design
This should be private and be documented as internal api;viktorklang;akka-akka-pull_request_comments-476;design
Should not getChild be only in UntypedActorContext;patriknw;akka-akka-pull_request_comments-639;design
ActorCell class must implement both and ActorContext does not expose the Java variant;rkuhn;akka-akka-pull_request_comments-639;design
This should be pulled out of the trait since it is a constant put move in some object;viktorklang;akka-akka-pull_request_comments-681;design
These should be in a companion object like usual;viktorklang;akka-akka-pull_request_comments-681;design
Should not this be in a companion object;drewhk;akka-akka-pull_request_comments-993;design
If the extension you have a reference to ExtendedActorSystem;viktorklang;akka-akka-pull_request_comments-681;design
LoggingAdapter does not belong in akka package class If you want to log directly then you should use that api directly;patriknw;akka-akka-pull_request_comments-913;design
it allows the Akka Logging API to be used outside of Actor systems;fommil;akka-akka-pull_request_comments-913;design
An advantage is that it does not require any dependencies;patriknw;akka-akka-pull_request_comments-913;design
Instead of directly calling into the ConcurrentSocketActor through methods like connect bind you should send messages to the actor;viktorklang;akka-akka-pull_request_comments-92;design
you are calling out to the methods of the Actor which is a violation of the ActorModel model why not put the connect methods inside the funciton they used internally in the actor;viktorklang;akka-akka-pull_request_comments-92;design
they are only invoked from select and should not be invoked from any other site either inside or outside the actor;kro;akka-akka-pull_request_comments-92;design
so move them into the select function so that they are only reachable from within it;viktorklang;akka-akka-pull_request_comments-92;design
I think it is better to create the actor inside the newSocket method and pass the supervisor into it;viktorklang;akka-akka-pull_request_comments-92;design
this method is only ever used in receiveFrames you might as well move the method definition into receiveFrames;viktorklang;akka-akka-pull_request_comments-92;design
will this be exposed in some way in Spray to serve static content;drewhk;akka-akka-issue_comments-1321;design
do we need to expose this in ActorRefProvider interface;patriknw;akka-akka-commit_comments-9c762dec2062f7a651363a6cc90d8105126d8f35;design
Since this is all so similar and now in quite a thought through state I am going to take a crack at refactoring it to one generic solution;viktorklang;akka-akka-pull_request_comments-344;design
reverted to the original code still like to have some comments to those Providers though since these design desicions are undocumented;viktorklang;akka-akka-pull_request_comments-554;design
LGTM;rkuhn;akka-akka-issue_comments-990;general
LGTM;patriknw;akka-akka-issue_comments-991;general
LGTM;rkuhn;akka-akka-issue_comments-993;general
Nice Would the code be clearer if the run-method would be named differently;viktorklang;akka-akka-pull_request_comments-92;general
Nice catch;viktorklang;akka-akka-pull_request_comments-1030;general
Nice one;drewhk;akka-akka-pull_request_comments-1030;general
Nice catch If we leave it a weak limit then we should document it;drewhk;akka-akka-pull_request_comments-1030;general
Nice catch;viktorklang;akka-akka-pull_request_comments-456;general
I can rename it to initialiseAndGetSSLHandler or more verbose;dev10;akka-akka-pull_request_comments-476;general
Avoid this branching here by concating the empty list in case it is not defined and a List with the one item if defined;viktorklang;akka-akka-pull_request_comments-476;general
I would not check for nulls here;viktorklang;akka-akka-pull_request_comments-476;general
I would probably escalate this as this is a serious security issue;viktorklang;akka-akka-pull_request_comments-476;general
I do not really like methods with innocent sounding names like getX that do a whole lot more than just getting something;viktorklang;akka-akka-pull_request_comments-476;general
Any suggestions as how to improve on this;viktorklang;akka-akka-pull_request_comments-476;general
Good rename;drewhk;akka-akka-pull_request_comments-1351;general
Will rename to Settings;krasserm;akka-akka-pull_request_comments-1700;general
this reads a bit too generic should we rename Message to Persisted;rkuhn;akka-akka-pull_request_comments-1700;general
Weird if the test passes;viktorklang;akka-akka-pull_request_comments-681;general
this test name suggests more than the test actually verifies;rkuhn;akka-akka-pull_request_comments-1030;general
this is a neat test harness;rkuhn;akka-akka-pull_request_comments-1030;general
We should enumerate which tests we need;rkuhn;akka-akka-pull_request_comments-1030;general
This may be the cause of the instabilities we have seen with the tests We have already got rid of most of the isTerminated but this instance was forgotten;jrudolph;akka-akka-pull_request_comments-1030;general
without it this test fails;patriknw;akka-akka-pull_request_comments-1232;general
Let us verify that again but I think it had something with test protocol not registered which is a good error to log;patriknw;akka-akka-pull_request_comments-1232;general
then I misunderstood the error message I will revisit that and probably have to delete that test or do you have a suggestion of how to test;patriknw;akka-akka-pull_request_comments-1232;general
has it been tested on linux;patriknw;akka-akka-pull_request_comments-476;general
first run on jenkins was successful which does not mean that it is fixed but anyway a good start;patriknw;akka-akka-pull_request_comments-940;general
I have run the test locally hundreds and hundreds of times without being able to reproduce it;viktorklang;akka-akka-pull_request_comments-951;general
Added a test that will start failing when this bug is fixed;viktorklang;akka-akka-pull_request_comments-718;general
we never loop around when order becomes Concurrent so it can not really be that here;bantonsson;akka-akka-commit_comments-61e47c115da8cfbcb1c2abfda37752cb436fd7eb;general
That is the beauty with actor logging you do not need to get the loop on the same stack;rkuhn;akka-akka-issue_comments-332;general
What about returning 0 here to handle potentially enqueued commands It is not immediately clear to me that this can not be an infinite loop in the worst case;rkuhn;akka-akka-pull_request_comments-1355;general
alright do you prefer to do the removal inside the above loop;patriknw;akka-akka-pull_request_comments-1459;general
ok we will keep the test I have changed the loop count Will merge;patriknw;akka-akka-issue_comments-1502;general
Closed is for we do not have an underlying transport yet while WaitActivity is for we are waiting for activity on the underlying transport Incoming connections logically start out in the second stage the first stage happens unbeknownst to us;rkuhn;akka-akka-pull_request_comments-831;general
It will probably change the order on the class path while running the testkit tests but it has no effect and is not intentional Just residue from the first rewrite;bantonsson;akka-akka-pull_request_comments-692;general
SIGAR returns 3 while jmx returns 1 There is no requirement to return 1 or 3 and one minutes is good;helena;akka-akka-pull_request_comments-689;general
The variant Viktor proposed will actually run the refresh() while I was referring to making the sending of RefreshCache messages recurring While those messages could potentially pile up running the refresh job should be fine if it is done synchronously I still think that the scheduleOnce approach is the easiest to grasp and also it does not leave state lingering around which needs to be cleaned up;rkuhn;akka-akka-pull_request_comments-485;general
Not likely but lets open a ticket about fixing all such occurences separately;viktorklang;akka-akka-pull_request_comments-997;general
so if someone sends this a buggy message we do not want it logged in unhandled;viktorklang;akka-akka-pull_request_comments-909;general
found the bug in the throttler;drewhk;akka-akka-pull_request_comments-970;general
still smells like a bug is hiding in there somewhere;rkuhn;akka-akka-pull_request_comments-746;general
This fix is still relevant because you expect to be able to call getBodyAs several times with the same result adding a debug log stmt should not break things;patriknw;akka-akka-pull_request_comments-894;general
Always good idea and indeed found a bug Two more tests are in now;hbf;akka-akka-pull_request_comments-835;general
we normally use unique names of the barriers to simplify debugging and this tests had already one;patriknw;akka-akka-pull_request_comments-818;general
t does not check if it is an event it could be some stray message and then it will not get sent to unhandled and it is hard to debug;viktorklang;akka-akka-pull_request_comments-703;general
I would probably log the exception at debug level;viktorklang;akka-akka-pull_request_comments-689;general
No It is a bug... Sigh;drewhk;akka-akka-pull_request_comments-652;general
that is a bug and a actually a very stupid one It is duplicated further;drewhk;akka-akka-pull_request_comments-652;general
ouch debug residue;rkuhn;akka-akka-pull_request_comments-621;general
Debug residue removing;viktorklang;akka-akka-pull_request_comments-554;general
Debug residue removing;viktorklang;akka-akka-pull_request_comments-554;general
I am using a debugger to see what is going on Will do proper debug logs next;avrecko;akka-akka-pull_request_comments-486;general
Removed Was only used for debugging;viktorklang;akka-akka-pull_request_comments-426;general
bug I fixed it for the cause case but not the my no cause case;astubbs;akka-akka-pull_request_comments-403;general
To aid in debugging might be nice to know why the message did not get through;viktorklang;akka-akka-pull_request_comments-395;general
Because newMemberSet is a Set but I need it to be a SortedSet See the comment about bug in Scala There is no CanBuildFrom for SortedSet;jboner;akka-akka-pull_request_comments-329;general
mistake by me changed from debug when debugging fixing now;jboner;akka-akka-pull_request_comments-281;general
very strange indeed It would be possible to work around that compiler bug it is adding the generated closure to the public static members but it is broken presumably because it is indeed nested within the by using lazy val but that is too expensive for this minor wart;rkuhn;akka-akka-pull_request_comments-250;general
BTW it is worth mentioning here that those log at DEBUG level and you must enable debug log level with;patriknw;akka-akka-pull_request_comments-248;general
Should include more debug info which consumer;viktorklang;akka-akka-pull_request_comments-217;general
Might want to include some more debug info about which actorref did not manage to activate within how long;viktorklang;akka-akka-pull_request_comments-217;general
It is scalariform Only happens for align parameters setting which we use I filed a bug;patriknw;akka-akka-pull_request_comments-209;general
othewise it is a bug in the scheduler;patriknw;akka-akka-pull_request_comments-206;general
Yep good idea I used that block for debugging at one point which is why it is so verbose;derekjw;akka-akka-pull_request_comments-199;general
Also you have a bug you a preprending that to that instead of this which means that you are lacking a test;viktorklang;akka-akka-pull_request_comments-1709;general
no this was not the bug but this is clearly not correct it should do records.filterNot(_.observer == observer);patriknw;akka-akka-pull_request_comments-1701;general
this does not really prune anything is this the bug you meant;rkuhn;akka-akka-pull_request_comments-1701;general
Nice catch That was a subtle bug;bantonsson;akka-akka-pull_request_comments-1552;general
I was looking for a way to reduce unhelpful logging output without disabling stack traces completely so that for certain debugging cases users can turn it back on ideally without needing to recompile;sirthias;akka-akka-pull_request_comments-1536;general
can not we change this Array to this bug is just another sign that the small performance advantage of array when parsing the original string is not worth it;patriknw;akka-akka-pull_request_comments-1389;general
It helps debugging and no security is violated as there is none;drewhk;akka-akka-pull_request_comments-1338;general
I like this name change;patriknw;akka-akka-pull_request_comments-1338;general
Just looking at the property name I thought it was something else I was thinking timeout on the sender side that it expects the ack within this timeCould we use something else than timeout flush;patriknw;akka-akka-pull_request_comments-1338;general
String.valueOf(rawValue);patriknw;akka-akka-pull_request_comments-1338;general
Yes make sense also for IndexedSeq above;drewhk;akka-akka-pull_request_comments-1338;general
pattern match since you are grabbing the values anyway;patriknw;akka-akka-pull_request_comments-1338;general
please move comment before if to make it align properly;rkuhn;akka-akka-pull_request_comments-1338;general
If we make it optional then we would have to require either an id or a manifest to be able to deserialize the message;bantonsson;akka-akka-pull_request_comments-1338;general
The problem is not reproducible with this fix the problem will be easier to debug if it manifests again;viktorklang;akka-akka-issue_comments-830;general
The return value is only used in one place line 195 where the whole bug fix originated;bantonsson;akka-akka-issue_comments-794;general
bug fixed;patriknw;akka-akka-issue_comments-787;general
I introduced a bug in previous refactoring I will update test and fix;patriknw;akka-akka-issue_comments-787;general
So I conclude that the bug is fixed until proven otherwise;mslinn;akka-akka-issue_comments-544;general
I have addressed almost all review comments so far some of the triggered some more major refactoring See the above commits I will continue the work on the actual router next week;patriknw;akka-akka-issue_comments-858;general
I have added instructions to the comments Changing how this is generated is ticket;bantonsson;akka-akka-pull_request_comments-540;general
I hope not that is an interesting test to join when already joined please create a ticket;patriknw;akka-akka-pull_request_comments-515;general
Yeah we have already talked about that If there is not a ticket already add one;jboner;akka-akka-pull_request_comments-505;general
no it is the same for all but that is a possible improvement as mentioned in the comments about DataStream;patriknw;akka-akka-pull_request_comments-858;general
Absolutely Will add comments;bantonsson;akka-akka-pull_request_comments-780;general
since I feel a lack of comments from my side on this PR is not acceptable I have no choice but to say;rkuhn;akka-akka-pull_request_comments-745;general
Same comments as above;viktorklang;akka-akka-pull_request_comments-689;general
Excellent thanks Please create a branch off of master and open a pull request with the renames comments;viktorklang;akka-akka-pull_request_comments-554;general
Thanks for the review Ronald I will pick up your comments tomorrow morning;RayRoestenburg;akka-akka-pull_request_comments-344;general
I think these comments were left over from the previous pull request;RayRoestenburg;akka-akka-pull_request_comments-245;general
Ok that is probably a good idea There are too many comments here now to see what is what;RayRoestenburg;akka-akka-pull_request_comments-245;general
No need just do as the comments that follow say;viktorklang;akka-akka-pull_request_comments-217;general
we actually tend to fix up such things by amending the commit and pushing with github is smart enough to figure it all out keeping the PR history and comments intact;rkuhn;akka-akka-pull_request_comments-1016;general
Updated according to review comments;drewhk;akka-akka-issue_comments-997;general
All comments have been addressed Should be picked up by the Kitteh;bantonsson;akka-akka-issue_comments-909;general
Aside from last batch of comments LGTM;viktorklang;akka-akka-issue_comments-893;general
I have not followed the problems so I do not have any valuable comments here;patriknw;akka-akka-issue_comments-630;general
Thanks for the changes I added some minor coding style related comments I vote for merging after those have been applied;hseeberger;akka-akka-issue_comments-500;general
ok I have removed the vals but want comments so some curlies and newlines;patriknw;akka-akka-pull_request_comments-209;general
we have a convention to use square brackets around variables in log and exception messages;patriknw;akka-akka-pull_request_comments-831;general
we have used BeforeAll and a static system variable at some other places;patriknw;akka-akka-pull_request_comments-780;general
I think our convention is to use around variable data in log messages at least Jonas has pointed that out for me;patriknw;akka-akka-pull_request_comments-242;general
while I like short variable names here they are part of the API by being parameter names I recommend using slightly more readable ones;drewhk;akka-akka-pull_request_comments-1700;general
A closure is a lambda expression with free variables which are bound to the enclosing lexical context the core feature is that it transports these bindings out;rkuhn;akka-akka-pull_request_comments-1676;general
our convention is to enclose variables in square brackets in log and error messages;patriknw;akka-akka-pull_request_comments-1333;general
the if expressions could now be inlined I think that was not previously the case because everything was on two lines;rkuhn;akka-akka-pull_request_comments-1343;general
Done although personally I do not like nested expressions so I keep the 2 step approach But  I have simplified the toString stuff;pveentjer;akka-akka-commit_comments-320ee3cb4c2b750fd1f22e005e14d5276105d473;general
If you mean negative delay not negative drift then the max 1 guards for negative delay in the expression;akshaal;akka-akka-issue_comments-781;general
I agree better remove all custom control structures and use normal if expressions the gain of the custom syntax is not worth its own cognitive weight;rkuhn;akka-akka-issue_comments-792;general
the if expressions could now be inlined I think that was not previously the case because everything was on two lines;rkuhn;akka-akka-pull_request_comments-1343;general
btw I do not know what is considered a complete rewrite While the structure of my code is very different the getNextState method is the same and the vectors cclass and states are just the evaluated versions of the original ones that had expressions there;drewhk;akka-akka-pull_request_comments-1624;general
This val could be eliminated by just moving the expression into the first call of offerElement eliminating the risk of the nanos val being improperly used in the code block;viktorklang;akka-akka-pull_request_comments-1630;general
the local def was only used to get around the old clunky syntax can make it nice and slick in one expression now;rkuhn;akka-akka-pull_request_comments-250;general
Only used in one place inline expression there;viktorklang;akka-akka-pull_request_comments-700;general
The flow method acts as the delimiter of flow expression composition;astubbs;akka-akka-pull_request_comments-770;general
Type in expressions to have them evaluated;ijuma;akka-akka-pull_request_comments-838;general
Is this line safe;viktorklang;akka-akka-pull_request_comments-970;general
Sorry I was looking at the wrong word yeah for the may in line 82 I leave it as is;rocketraman;akka-akka-pull_request_comments-952;general
I meant to ask why this line is not moved three lines up;rkuhn;akka-akka-pull_request_comments-940;general
I think that is problematic from the command line script;patriknw;akka-akka-pull_request_comments-927;general
header line here;patriknw;akka-akka-pull_request_comments-926;general
this header line is wrong remove;patriknw;akka-akka-pull_request_comments-926;general
I would suggest switching to either Vector or a mutable append data structure to avoid reverse on line 28;viktorklang;akka-akka-pull_request_comments-91;general
I will remove my link and see if the docs still build If they do then we can probably get rid of that line altogether;richdougherty;akka-akka-pull_request_comments-890;general
Is not there a stray in the line 10 TimeUnit SECONDS;bantonsson;akka-akka-pull_request_comments-880;general
Why this line here;viktorklang;akka-akka-pull_request_comments-858;general
look on the line above also checked when reading the config;patriknw;akka-akka-pull_request_comments-858;general
when using one parameter per line it is preferred to start the first one on a new line;patriknw;akka-akka-pull_request_comments-831;general
Yes no extra line there either;bantonsson;akka-akka-pull_request_comments-814;general
Ideally line breaks should be done virtually by formatting in your editor Since that is not the case I do not think we should sacrifice readability for people using unix terminals 120 is a good modern limit;viktorklang;akka-akka-pull_request_comments-719;general
it looks like you have some auto line break setting that does not match our conventions 120 char lines are ok;patriknw;akka-akka-pull_request_comments-719;general
that was a strange link conversion it starts on line 203;patriknw;akka-akka-pull_request_comments-703;general
This line does not do anything;viktorklang;akka-akka-pull_request_comments-698;general
Does this empty line somehow contain secret information is it some side channel 429 what do these primes tell us;rkuhn;akka-akka-pull_request_comments-511;general
This line makes 0 sense to me;viktorklang;akka-akka-pull_request_comments-380;general
And the line you are commenting on does not make sense;jboner;akka-akka-pull_request_comments-329;general
Can you change your commit message to match the usual Akka conventions;richdougherty;akka-akka-issue_comments-1194;general
Lift naming conventions are quite inconsistent so the association between or and is probably much weaker than with Option In any case the Lift community is a strict subset of the Scala community so or is an improvement over;djspiewak;akka-akka-pull_request_comments-147;general
I see no difference for java and scala for these formatting conventions;patriknw;akka-akka-pull_request_comments-719;general
this formatting looks a bit surprising parenthesis structure I would suggest keeping all of createInstanceFor on the first line and start the next with recover;rkuhn;akka-akka-pull_request_comments-858;general
this if else has somewhat misleading formatting;rkuhn;akka-akka-pull_request_comments-831;general
of course you do not need to undo these formatting changes;patriknw;akka-akka-pull_request_comments-719;general
I would add some indentation of the whole config and fix formatting of next line;patriknw;akka-akka-pull_request_comments-700;general
use the logging formatting instead;viktorklang;akka-akka-pull_request_comments-350;general
I think I messed that up Later on the reformatting did not do this;RayRoestenburg;akka-akka-pull_request_comments-245;general
wrong the changes are probably some auto formatting thing in IntelliJ;piotrga;akka-akka-pull_request_comments-217;general
automatic formatting perhaps;piotrga;akka-akka-pull_request_comments-217;general
I assumed so and I did not pay that much attention to formatting;piotrga;akka-akka-pull_request_comments-217;general
I could not find anything about reformatting MDC values so this will just print a mildly meaningless 10 digit number What we can do is to print the time of day in UTC side stepping the expensive calendar formatting issues This will usually be well correlated with the SLF4J timestamp because the delay between the generation of the Event and the call to log should not be that long;rkuhn;akka-akka-pull_request_comments-1356;general
True but I do not want to waste CPU formatting something that might not be used and then the user can not really reformat easily;viktorklang;akka-akka-pull_request_comments-1356;general
is this formatting looking good;patriknw;akka-akka-pull_request_comments-1095;general
this is an automatic formatting by scalariform in eclipse only when there is;patriknw;akka-akka-pull_request_comments-1033;general
I thought I had done that but some reformatting or automatic importing must have messed it up again Will fix;rkuhn;akka-akka-pull_request_comments-1027;general
LGTM apart from some formatting;rkuhn;akka-akka-issue_comments-1485;general
Added documentation and fixed formatting;patriknw;akka-akka-issue_comments-1228;general
LGTM apart from the formatting;bantonsson;akka-akka-issue_comments-1228;general
Apart from formatting LGTM;drewhk;akka-akka-issue_comments-1228;general
Could you revert this formatting change;jboner;akka-akka-commit_comments-8f7bd6909a7357b05d2ffeeebf51c8073ec1d742;general
Nice formatting change Should switch to the FSMDocTest approach because that still leaks when tests fail;rkuhn;akka-akka-commit_comments-8c5d10df8e75aec760e39dd71658b963febd2428;general
this file should have worked without reformatting as far as I can see reformatting it is fine but want to be sure you did not reformat because the parser was upset about the original;havocp;akka-akka-commit_comments-4b8f11ea92ab3fb4809e2ca84b11ac93771477bb;general
ouch I blame my scrapped Eclipse workspace for losing this piece of configuration;rkuhn;akka-akka-pull_request_comments-705;general
we have those to be able to run tests directly inside Eclipse when the scalatests runner is working we will remove all of them;patriknw;akka-akka-pull_request_comments-700;general
yes it looks a lot more funny outside of Eclipse;rkuhn;akka-akka-pull_request_comments-541;general
imports at top of file is normally something I just want the IDE to take care of and Eclipse does not do this kind of multi import but I have changed it for you;patriknw;akka-akka-pull_request_comments-214d;general
Are you gonna blame Eclipse for this hideous indentation;bantonsson;akka-akka-pull_request_comments-1731;general
eclipse formatting due to the;patriknw;akka-akka-pull_request_comments-1339;general
eclipse scalariform will reformat this line because of the;patriknw;akka-akka-pull_request_comments-1263;general
looks magic and fragile and eclipse does not understand it but if it is not possible then just ignore my comment;patriknw;akka-akka-pull_request_comments-1027;general
