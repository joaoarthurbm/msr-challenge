<patriknw> I don't think we should add this comment to private members
<viktorklang> In case Scala changes visibility for other JVM languages, I think we need to.
<patriknw> private is not visible for Java afaik
private[akka] is another thing
otherwise there will be a lot of those comments
<viktorklang> fair enough.
<viktorklang> These should of course be documented
<jboner> Could add that it should be a valid URL, so they know what and why. 
<jboner> Return type?
<jboner> Could we switch to Scala Lib's MurmurHash or Phil's new hash? 
<viktorklang> Nice catch!
<patriknw> private, or define explicit return type
<patriknw> with the new constructor you don't need = null here, do you?
<patriknw> why is this case class, and other exceptions are not?
<viktorklang> Nice catch!
<patriknw> any risk with that we can't change this one?
would it be possible to move to context?
<patriknw> yes, I see no reason why not
<rkuhn> what purpose does this UUID serve nowadays? I hope lazy vals are not secretly `@transient` …
<patriknw> I don't know
<patriknw> I think ActorRefProvider and related things should not be user extendable yet

<patriknw> protected[akka], or prevent subclassing by user code
<rkuhn> might make sense to mention what its only use-case within the library is
<rkuhn> didn’t know that double-brace suffices
<rkuhn> behavior == state, hence a restart must clear it, so why would we want to move it into the context? because it is a var in a trait? (and yes, it won’t be private because of the constructor business)
<rkuhn> yup: http://www.ietf.org/rfc/rfc2396.txt
<patriknw> why not private[akka] for the whole ActorSystemImpl?
<viktorklang> I'll see what I can do
<patriknw> I don't think it should, yet
<viktorklang> It'll be used by Akka Camel as well
<rkuhn> Hmm, I know first-hand what the location transparency thing is all about, but would it not make sense for user code to ask a ref whether it is local or not in order to determine proper timeouts etc.? I’m on the fence, really.
<patriknw> Seq
<rkuhn> yes, I think so
<rkuhn> nice one!
<patriknw> I think it can be private[akka]
<patriknw> what?
<patriknw> explicit type
<patriknw> in what way is this more readable than the original?
<patriknw> use Unsafe ;-)
<patriknw> is the recursion here on purpose?
<rkuhn> Because otherwise we wouldn’t know how to create a Future during `ask()`. But we could also change that to require an `implicit ExecutionContext`. (That was all from akka-actor, still diggin’)
<rkuhn> Same here (i.e. we wouldn’t know how to do the ask timeout thing). Essentially the underlying reason is that ActorRefProvider does not expose a reference to its ActorSystem, which is a good idea because of initialization order.
<patriknw> is this still correct?
executorService is  now a ExecutorService, but LoadMetrics is not implemented by that?
<rkuhn> And replace it with what, exactly?
<rkuhn> `protected[akka]` is weaker than `protected`, so what are you saying? Subclassing applies to ActorSystem or ActorCell, so I don’t see a problem which emerges from this line.
<patriknw> No need to repeat the name of the documented element.

A factory to create MessageQueues for an optionally provided ActorContext
<patriknw> No need to repeat the name of the documented element.
<jboner> LOL
<rkuhn> WDYM? I don’t see how this should be improved.
<rkuhn> thx
<rkuhn> I don’t think it should ever.
<rkuhn> +1
<rkuhn> You mean: why is it exposed? Because it does need to exist somewhere. A good way to answer these questions is by simply removing it and seeing what breaks. ISTR having good reasons to split this out when doing the actor system initialization.
<rkuhn> (somewhat like the fact that one of the earliest required devices during Linux boot sequence is /dev/null)
<viktorklang> great catch, fixed 
<viktorklang> great catch, fixed.
<rkuhn> nope, see implementation, also for traversals.
<rkuhn> Because it makes sense, I don’t see any value in hiding it. The rest of the ActorPath handling is also not private.
<viktorklang> behaviorStack is now moved to ActorCell
<rkuhn> y’aint gonna saturate no 100GB link like this ;-)
<viktorklang> Read the classdef! :D
<rkuhn> +1
<rkuhn> So you don’t want people to implement `MessageDispatcher`? I must have read that email wrong which you sent to akka-user just minutes ago ;-)
<patriknw> and that wasn't caught by tests? scary
<viktorklang> Wow, that's not a good reason. Actors already have an implicit dispatcher y'know.
I'll remove it.
<rkuhn> Think again, please. And this time keep in mind that not all actors are local.
<viktorklang> No, I mean if we make it an implicit EC then we already cover the base of actors calling Ask, and there's an implicit from AS => MD (EC) so if you have a system lying around you can obtain it from there.
HOWEVER, if we go the SIP-14 route with Havoc's proposal we might not even need the EC at all.
<jboner> I don't think it does. Use {{{ ... }}} (.e.g triple brace). 
Or correct me :-)
http://docs.scala-lang.org/style/scaladoc.html
<rkuhn> yup, checked that after commenting.
<jboner> Well, doc could be improved. Not clear at all what it should be used for nor its semantics. 
<jboner> Why not fix these FIXMEs as part of this pull request? 
<jboner> +1
<jboner> LOL
<jboner> +1
<viktorklang> Because I do not have infinite time.
I marked it as a FIXME instead of simply a TODO so that it's highlighted when someone goes on a hunt for FIXMEs, however, I do not believe that this setting has anything to do with binary compatibility, and I wanted to focus my efforts on that, since it's both the target of the ticket I'm working on and the name of the branch ;)
<viktorklang> I disagree, if you want to copy&paste from the ScalaDoc it's way easier if the name is contained within the description.
<viktorklang> fixed
<patriknw> I was thinking about scala style guide; http://docs.scala-lang.org/style/scaladoc.html
When referring to the instance of the class, use “this XXX”, or “this” and not “the XXX”. For objects, say “this object”.

It's no big deal. I think the reason is to minimize the risk of outdated docs (renaming).
<viktorklang> Fair point, but ScalaDoc is shoddy anyway. I'd like a documentation format
where the code samples is actually compiled and you could refer to the
different parts (perhaps you already can?)
$thisClass etc
<patriknw> yeah, that would be super awesome
You can refer/link to classes [[akka.actor.Actor]], but I don't think you can for members, which is poor.
