to = ggplot(data, aes = (x = factor(0) , y = amplitude) )
to = ggplot(data, aes(x = factor(0) , y = amplitude) )
to + boxplot() + facet_wrap(~project)
to + geom_boxplot() + facet_wrap(~project)
to + geom_boxplot() + facet_grid(~project)
to = ggplot(data, aes(x = factor(project) , y = amplitude) )
to + geom_boxplot() 
to = ggplot(data, aes(x = amplitude, y = project))
to + geom_jitter()
to + stat_ecdf()
to = ggplot(data, aes(y = amplitude, x = project))
to + stat_ecdf()
ecdf(data$amplitude)
plot(ecdf(data$amplitude))
qqplot(data$amplitude)
qqplot(data$project,data$amplitude)
to + stat_ecdf()
 to = ggplot(data, aes(x=amplitude, y=cumsum, group=project)) + geom_line() 
to
to = ggplot(data, aes(x = amplitude, x = project))
to + geom_bar()
to + geom_point()
to + geom_point() + scale_shape(solid = FALSE)
to + geom_point(alpha = 1/10) 
to + geom_point(alpha = 1/5) 
to + geom_point(alpha = 1/100) 
to + geom_point(alpha = 1/50) 
to + geom_point(alpha = 1/50, colour = "blue") 
to + geom_point(alpha = 1/10, colour = "blue") 
to + geom_jitter(alpha = 1/10, colour = "blue") 
to + geom_jitter(colour = "blue") 
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank())
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_x_discrete(breaks = seq(10))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_x_discrete(breaks = seq(1:10))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_x_discrete(breaks = seq(1:100:10))
seq(1:100:10)
seq(1:10:100)
seq(10:1:100)
seq(10:100)
seq(10)
seq(10:2)
seq(100:10)
seq(100,10)
seq(100,10,10)
seq(100,10,10)
seq(1,10,100)
seq(10,10,100)
seq(100,10,100)
seq(100,10)
seq(10,100)
seq(10,100,10)
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_x_discrete(breaks = seq(10,100,10))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank(), axis.title.x = text_element("Projects")) + scale_y_discrete(breaks = seq(10,100,10))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank(), axis.title.x = element_text("Projects")) + scale_y_discrete(breaks = seq(10,100,10))
library("ggplot2")
theme_set(theme_bw())
to = ggplot(data, aes(y = Amplitude, x = Project))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + main("oi")
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_text("dasd")) + scale_y_discrete(breaks = seq(10,100,10)) + ggtitle("Title")
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + ggtitle("Title") + ylab("Amplitude %")
quantiles(data$Amplitude)
quantile(data$Amplitude)
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + ylab("Amplitude %")
quantile(.99,data$Amplitude)
quantile(0.9,data$Amplitude)
quantile(0,9,data$Amplitude)
quantile(data$Amplitude, 0.9)
quantile(sort(data$Amplitude), 0.99)
quantile(sort(data$Amplitude), 1)
quantile(sort(data$Amplitude), 0.99)
plot(ecdf(data$Amplitude))
to = ggplot(data, aes(y = Amplitude, colour = Project)) 
to + stat_ecdf()
to = ggplot(data, aes(y = Amplitude, x = Project) ) 
data$Amplitude
to = ggplot(data, aes(y = Amplitude, x = Project) ) 
to = ggplot(data, aes(x = Amplitude ) ) 
to + stat_ecdf()
to = ggplot(data, aes(x = Amplitude, colour = Project ) ) 
to + stat_ecdf()
to = ggplot(data, aes(x = Amplitude ) ) 
to + stat_ecdf(colour = Project)
to = ggplot(data, aes(x = Amplitude, colour = Project ) ) 
to + stat_ecdf()
to + stat_ecdf(geom = "smooth")
to + stat_ecdf() + stat_smooth()
to + stat_ecdf(geom =c( "smooth", "point"))
to + stat_ecdf() + geom_jitter()
to = ggplot(data, aes(x = Amplitude, colour = Project, geom = "jitter" ) ) 
to + stat_ecdf()
to + stat_ecdf() + theme(legend.position="none")
to + stat_ecdf(alpha = 1/100) + theme(legend.position="none")
to + stat_ecdf(alpha = 1/10) + theme(legend.position="none")
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none")
to = ggplot(data, aes(x = Amplitude, shape = Project ) ) 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none")
to = ggplot(data, aes(x = Amplitude ) ) 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none")
to + geom_smooth(aes(group = Project), method = "ecdf", se = FALSE)
to + geom_smooth(aes(group = Project), method = "cdf", se = FALSE)
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none")
to = ggplot(data, aes(x = Amplitude, fill = Project)) 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none")
to + stat_ecdf() + theme(legend.position="none")
to = ggplot(data, aes(x = Amplitude, grouá¹• = Project)) 
to = ggplot(data, aes(x = Amplitude, group = Project)) 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none")
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") + scale_x_discrete(breaks = seq(10,100,10)))
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") + scale_x_discrete(breaks = seq(10,100,10))
data$Amplitude
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") + scale_x_discrete(breaks = seq(10,100,10))
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") + scale_x_discrete(breaks = seq(10,100,10))
library("ggplot2")
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") + scale_x_discrete(breaks = seq(10,100,10))
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") 
to + stat_ecdf() + theme(legend.position="none") 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") 
data$Amplitude
to = ggplot(data, aes(x = sort(Amplitude), group = Project)) 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") 
to = ggplot(data, aes(x = Amplitude, group = Project)) 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") 
to = ggplot(data, aes(x = sort(Amplitude), group = Project)) 
to + stat_ecdf(alpha = 1/5) + theme(legend.position="none") 
to + stat_ecdf() + theme(legend.position="none") 
to + stat_ecdf(size = 1) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/5) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/100) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/50) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/15) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/10) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/2) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/5) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") 
stat_ecdf(size = 1, alpha = 1/3)
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") 
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") + ylab("Cumulative Frequency")
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") + ylab("Cumulative Frequency") + xlab("Amplitude")
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") + ylab("Cumulative Frequency") + xlab("Amplitude (%)")
head (data)
library("ggplot2")
theme_set(theme_bw())
data = read.table("projeto-desenvolvedor-intensidade-amplitude.data", header = T)
to = ggplot(data, aes(x = sort(Amplitude), group = Project))
to + stat_ecdf(size = 1, alpha = 1/3) + theme(legend.position="none") + ylab("Cumulative Frequency") + xlab("Amplitude (%)")
library("ggplot2")
data = read.table("designactivity-developer.data", header = T)
head(data)
plot(data)
data = read.table("designactivity-developers.data", header = T)
plot(data)
head data
head(data)
nrow(data)
to = ggplot(data, aes(x = Developers))
to + geom_histogram()
to + geom_histogram(binwidth = 1)
to + geom_histogram(binwidth = 1) + scale_x_discrete(breaks = seq(1,50,1))
data
head(data)
head(data,100)
to + geom_histogram(binwidth = 1) + scale_x_discrete(breaks = seq(1,50,1))
to + geom_histogram(binwidth = 1) + scale_x_discrete(breaks = seq(1,50,1)) +  coord_cartesian(ylim=c(1, 50)) 
to + geom_histogram(binwidth = 1) +  coord_cartesian(ylim=c(1, 50)) 
to + geom_histogram(binwidth = 1) +  coord_cartesian(xlim=c(1, 50)) 
to + geom_histogram(binwidth = 1) +  coord_cartesian(xlim=c(1, 30)) 
to + geom_histogram(binwidth = 5) +  coord_cartesian(xlim=c(1, 30)) 
summary(data$Developers)
to + geom_histogram(binwidth = 1) 
to + geom_histogram(binwidth = 2) 
to + geom_histogram(binwidth = 3) 
to + geom_histogram(binwidth = 4) 
to + geom_points() 
to + geom_point() 
quantiles(data$Developers)
quantile(data$Developers)
quantile(data$Developers,0.9)
quantile(data$Developers,0.99)
quantile(data$Developers,0.9000)
quantile(data$Developers,0.99999)
to = ggplot(data, aes(x = Discussion, size = Developer))
to + geom_point() 
to = ggplot(data, aes(x = Discussion, size = Developers))
to + geom_point() 
to = ggplot(data, aes(x = Developers))
to + geom_histogram(binwidth = 1)
data$Developers
library("ggplot2")
data = read.table("designactivity-developers.data", header = T)
head(data)
plot(ecdf(data$Developers))
plot((data$Developers))
to = ggplot(data, aes(factor(0), y = Developers))
to + geom_boxplot()
data = read.table("designactivity-developers.data", header = T)
plot(ecdf(data$Developers))
to = ggplot(data, aes(factor(0), y = Developers))
to + geom_boxplot()
to + geom_boxplot() + coord_flip()
data = read.table("project-designactivity-developers.data", header = T)
data = read.table("project-designactivity-developers.data", header = T)
to = ggplot(data, aes(factor(0), y = Developers, colour = Projects))
to + geom_boxplot() + coord_flip()
head(data)
to = ggplot(data, aes(factor(0), y = Developers, colour = Project))
to + geom_boxplot() + coord_flip()
to + geom_boxplot() + facet_grid( ~ Project)
to = ggplot(data, aes(factor(0), y = Developers))
to + geom_boxplot() + facet_grid( ~ Project)
to = ggplot(data, aes(x = Project, y = Developers))
to + geom_boxplot()
to + geom_point()
to + geom_histogram()
to = ggplot(data, aes(y = Developers))
to + geom_histogram()
to = ggplot(data, aes(x = Discussions, y = Developers))
to + geom_histogram()
to = ggplot(data, aes(x = Discussion, y = Developers))
to + geom_histogram()
to = ggplot(data, aes(x = Developers))
to + geom_histogram()
to + geom_histogram() + scale_y_log10()
to + geom_histogram(binwidth = 1) + scale_y_log10()
to + geom_histogram(binwidth = 1) 
to + geom_histogram(binwidth = 1) +  + scale_y_log10()
to + geom_histogram(binwidth = 1) +  scale_y_log10()
to + geom_histogram() + scale_y_log10()
to = ggplot(data, aes(x = Developer))
summary(data$Developers)
summary(data$Developer)
to + geom_histogram() + scale_y_log10()
to + geom_histogram(binwidth = 1) +  scale_y_log10()
to = ggplot(data, aes(x = Project, y = Developer))
to + geom_point()
to = ggplot(data, aes(x = Project, y = Developer))
to = ggplot(data, aes(x = Project, y = Developer ))
to + geom_boxplot() + facet_wrap( ~ Project)
to = ggplot(data, aes(x = factor(0), y = Developer ))
to + geom_boxplot() + facet_wrap( ~ Project)
to = ggplot(data, aes(x = factor(0), y = Developer, group = Project))
to + geom_boxplot() + scale_y_log10()
data = read.table("project-designactivity-developers.data", header = T)
head(data)
data = read.table("project-designactivity-developers.data", header = T)
head(data)
to = ggplot(data, aes(x = Developer, y = Comments, group = Discussion))
to + geom_point()
to = ggplot(data, aes(x = Developer, y = Comment, group = Discussion))
to + geom_point()
to = ggplot(data, aes(x = Developer, y = Comment, group = Discussion, colour = Project))
to + geom_point()
to = ggplot(data, aes(x = Developer, y = Comment, group = Discussion, colour = Project))
to + geom_point()  + theme(legend.position="none")
to + geom_point()  + theme(legend.position="none") + scale_y_log10()
to + geom_jitter()  + theme(legend.position="none") + scale_y_log10()
to = ggplot(data, aes(x = Developer, y = Comment, group = Discussion, shape = Project))
to + geom_jitter()  + theme(legend.position="none") + scale_y_log10()
to = ggplot(data, aes(x = Developer, y = Comment, group = Discussion, size = Project))
to + geom_jitter()  + theme(legend.position="none") + scale_y_log10()
to = ggplot(data, aes(x = Developer, y = Comment, group = Discussion, colour = Project))
to + geom_jitter()  + theme(legend.position="none") + scale_y_log10()
to + geom_jitter()  + theme(legend.position="none") + scale_y_log10() + scale_x_log10()
to + geom_jitter()  + theme(legend.position="none") 
to + geom_line()  + theme(legend.position="none") 
to + geom_point() + theme(legend.position="none") 
to + geom_density() + theme(legend.position="none") 
to + geom_point() + theme(legend.position="none") 
cor.test(data$Developer,data$Comment)
plot(data$Developer,data$Comment)
library("ggplot2")
theme_set(theme_bw())
data = read.table("project-architects-developers.data", header = T)
to = ggplot(data, aes(Projects, fill = Role))
to + geom_bar(position = "fill") + scale_y_continuous(labels = percent_format()) + scale_fill_grey() + theme(axis.text.x=element_blank(),  axis.ticks=element_blank(), axis.title.y=element_blank())
library("lattice")
to + geom_bar(position = "fill") + scale_y_continuous(labels = percent_format()) + scale_fill_grey() + theme(axis.text.x=element_blank(),  axis.ticks=element_blank(), axis.title.y=element_blank())
to + geom_bar(position = "fill") + scale_y_continuous(labels = percent) + scale_fill_grey() + theme(axis.text.x=element_blank(),  axis.ticks=element_blank(), axis.title.y=element_blank())
library(scales)
to + geom_bar(position = "fill") + scale_y_continuous(labels = percent_format()) + scale_fill_grey() + theme(axis.text.x=element_blank(),  axis.ticks=element_blank(), axis.title.y=element_blank())
library("ggplot2")
theme_set(theme_bw())
data = read.table("../data-to-plot/project-design-general-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
lab = c("0.15", "0.29", "0.44")
gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) + coord_cartesian(ylim=c(0, 1)) + ylab("Design discussions proportion")
gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) + coord_cartesian(ylim=c(0, 1)) + ylab("Design discussions proportion") + scale_fill_brewer()
gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) + coord_cartesian(ylim=c(0, 1)) + ylab("Design discussions proportion") + scale_fill_brewer()
library("ggplot2")
theme_set(theme_bw())
data = read.table("../data-to-plot/to-plot-project-developer-intensity-amplitude.data", header = T)
to = ggplot(data, aes(y = Amplitude, x = Project))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
to + geom_point(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  require(grid)
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  numPlots = length(plots)
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }
 if (numPlots==1) {
    print(plots[[1]])
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
library("ggplot2")
p = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + ylab("Design discussions proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-designers-commiters-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
q = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + ylab("Designers proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
multiplot(p1, p2, cols=1)
multiplot(p, q, cols=1)
multiplot(p, q, cols=2)
multiplot(p, q, p, q, cols=4)
library("ggplot2")
theme_set(theme_bw())
data = read.table("../data-to-plot/to-plot-project-developer-intensity-amplitude.data", header = T)
to = ggplot(data, aes(y = Amplitude, x = Project))
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
to + geom_jitter(colour = "blue") + theme(axis.text.x=element_blank(), axis.text.y = element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
to + geom_jitter(colour = "blue") + theme(axis.text.y = element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  require(grid)
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  numPlots = length(plots)
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }
 if (numPlots==1) {
    print(plots[[1]])
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
library("ggplot2")
theme_set(theme_bw())
p = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + ylab("Design discussions proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-designers-commiters-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
q = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + ylab("Designers proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-developer-intensity-amplitude.data", header = T)
to = ggplot(data, aes(y = Amplitude, x = Project))
to + geom_jitter(colour = "blue") + theme(axis.text.y = element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
to = to + geom_jitter(colour = "blue") + theme(axis.text.y = element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
multiplot(p, q, to , to, cols=4)
library("ggplot2")
theme_set(theme_bw())
p = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + xlab("Design discussions proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-designers-commiters-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
q = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + xlab("Designers proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-developer-intensity-amplitude.data", header = T)
to = ggplot(data, aes(y = Amplitude, x = Project))
to = to + geom_jitter(colour = "blue") + theme(axis.text.y = element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
multiplot(p, q, to , to, cols=4)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  require(grid)
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  numPlots = length(plots)
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }
 if (numPlots==1) {
    print(plots[[1]])
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
library("ggplot2")
theme_set(theme_bw())
data = read.table("../data-to-plot/to-plot-project-design-general-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
p = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + xlab("Design discussions proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-designers-commiters-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
q = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + xlab("Designers proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-developer-intensity-amplitude.data", header = T)
to = ggplot(data, aes(y = Amplitude, x = Project))
to = to + geom_jitter(colour = "blue") + theme(axis.text.y = element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
multiplot(p, q, to , to, cols=4)
par(mfrow=c(1,4))
p
q
to
to
par(mfrow=c(2,2))
p
to
q
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  require(grid)
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  numPlots = length(plots)
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }
 if (numPlots==1) {
    print(plots[[1]])
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
        # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
library("ggplot2")
theme_set(theme_bw())
data = read.table("../data-to-plot/to-plot-project-design-general-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
p = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + xlab("Design discussions proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-designers-commiters-proportion.data", header = T)
gg = ggplot(data, aes(x = factor(0), y = Proportion))
q = gg + geom_boxplot() + theme( axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank() ) + coord_cartesian(ylim=c(0, 1)) + xlab("Designers proportion") + geom_jitter() + scale_y_continuous(breaks=seq(0,1,1/10))
data = read.table("../data-to-plot/to-plot-project-developer-intensity-amplitude.data", header = T)
to = ggplot(data, aes(y = Amplitude, x = Project))
to = to + geom_jitter(colour = "blue") + theme(axis.text.y = element_blank(), axis.ticks=element_blank(), axis.title.y=element_blank()) + scale_y_discrete(breaks = seq(10,100,10)) + coord_flip()
multiplot(p, q, to , to, cols=4)
data = read.table("t")
head(data)
plot(data$V3,data$V4)
cor.test(data$V4,data$V4)
cor.test(data$V3,data$V4)
data = read.table("t")
plot(data$V3,data$V4)
plot(data$V3,data$V4)
data = read.table("t")
plot(data$V3,data$V4)
data = read.table("t")
head (data)
plot(data$V3,data$V4)
cor.test(data$V3,data$V4)
data = read.table("t")
plot(data$V3,data$V4)
cor.test(data$V3,data$V4)
?logscale
plot(data$V3,data$V4, log = "xy")
library("ggplot2")
plot(data$V3,data$V4, log = "xy")
plot(data$V3,data$V4)
data = read.table("t", header = T)
to = ggplot(data, aes(x=Amplitude, y=Commits))
to+geom_jitter()
to+geom_jitter() + stat_smooth()
to+geom_jitter() + stat_smooth(level=0.99)
to+geom_jitter() + stat_smooth()
to+geom_jitter() + stat_smooth()
data = read.table("../data-to-plot/to-plot-project-designers-commiters-proportion.data", header = T)
summary(data$Proportion)
